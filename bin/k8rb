#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

###
### $Release: 0.0.0 $
### $Copyright: copyright(c) 2014-2015 kuwata-lab.com all rights reserved $
### $License: MIT License $
###


require 'keight'
require 'baby_erubis'


module K8


  class Main

    @__current = nil
    @__actions = []

    @action = proc do |action_name, desc, dict|
      options = []
      method_name = nil
      (dict ||= {})[:desc] = desc
      tuple = [action_name, dict, options, method_name]
      @__current = tuple
      @__actions << tuple
    end

    @option = proc do |optdef_str, desc, opts|
      tuple = @__current  or
        raise "@option.() is called without @action.()"
      tuple[2] << [optdef_str, desc]
    end

    def self.method_added(method_name)
      tuple = @__current  or return
      tuple[3] = method_name
      @__current = nil
    end

    def self.find_action(name)
      name = name.to_s
      return @__actions.find {|tuple| tuple[0].to_s == name }
    end

    def self.each_action(&block)
      @__actions.each(&block)
    end


    ###

    def initialize(script_name=nil)
      @script_name = script_name || File.basename($0)   # ex: 'k8rb'
    end

    attr_reader :script_name


    ### actions

    @action.(:help, "show help")
    def do_help(action_name=nil)
      script = self.script_name
      sb = []
      if action_name.nil?
        sb <<   "Usage:"
        sb <<   "  #{script} ACTION [..OPTIONS..]"
        sb <<   ""
        sb <<   "Actions:"
        self.class.each_action do |action_name, dict, options, _|
          desc = dict[:desc]
          next unless desc
          help = desc.lines.first.chomp()
          sb << "  #{script} %-15s # #{help}" % [action_name, help]
        end
        sb <<   ""
        sb <<   "(Tips: try '#{script} help ACTION' for details of each action.)"
      else
        tuple = self.class.find_action(action_name)  or
          raise K8::OptionError.new("help #{action_name}: no such action.")
        action_name, dict, options, method_name = tuple
        pnames = self.method(method_name).parameters.collect {|kind, pname|
          case kind
          when :req  ;  pname
          when :opt  ;  "[#{pname}]"
          when :rest ;  "[#{pname}...]"
          when :key  ;  nil
          else
            raise "** kind=#{kind.inspect}, pname=#{pname.inspect}"
          end
        }.compact()
        pnames.unshift('') unless pnames.empty?
        argstr = pnames.join(' ')
        sb <<   "#{script} #{action_name}  - #{dict[:desc]}"
        sb <<   ""
        sb <<   "Usage:"
        if options.empty?
          sb << "  #{script} #{action_name}#{argstr}"
        else
          sb << "  #{script} #{action_name} [options]#{argstr}"
          sb << ""
          sb << "Options:"
          options.each do |optdef_str, optdesc|
            optstr = optdef_str.sub(/\A\s*--/, '    --').sub(/\s+\#\w+\s*\z/, '')
            sb << "  %-20s # %s" % [optstr, optdesc] if optdesc
          end
        end
        if dict[:example]
          sb << ""
          sb << "Examples:"
          sb << dict[:example].gsub(/%SCRIPT%/, script)
        end
      end
      sb << ""
      sb << ""
      return sb.join("\n")
    end

    @action.(:project, "create project files")
    @option.("-s, --skeleton=DIR", "directory of skeleton files")
    def do_project(name, dir: nil)
      project_name = name
      dir ||= K8::FILEPATH.sub(/\.rb\z/, '') + "/skeleton"
      if dir
        File.directory?(dir)  or
          raise "#{dir}: directory not exist."
        o = K8::FileTool.new
        descs = o.parse_index_file("#{dir}/index.txt")
        o.mkdir(project_name, "project root directory")
        files = Dir.glob("#{dir}/**/*")
        files.concat(["#{dir}/.gitignore"])
        files.each do |path|
          base = path[(dir.length+1)..-1]
          if base == "index.txt"
            next
          elsif base =~ /\/\.keep\z/
            next
          elsif File.directory?(path)
            o.mkdir("#{project_name}/#{base}", descs[base+"/"])
          elsif File.file?(path)
            content = path =~ /\Astatic\/lib|\.gz\z/  \
                    ? File.read(path, encoding: 'ascii-8bit')  \
                    : K8::SkeletonTemplate.new.from_file(path, 'ascii-8bit').render()
            o.mkfile("#{project_name}/#{base}", content, descs[base])
          else
            next
          end
        end
        #
        _download_necessary_libraries(project_name)
        #
        return
      end
      0
    end

    def _download_necessary_libraries(project_name)
      puts ""
      Dir.chdir(project_name) do
        puts "$ cd #{project_name}"
        rexp = /%>\/(jquery|modernizr)\/(\d+\.\d+\.\d+)/
        File.open("app/template/_layout.html.eruby") {|f|
          f.collect {|line| [$1, $2] if line =~ rexp }.compact()
        }.each do |library, version|
          puts "$ #{@script_name} cdnjs #{library} #{version}"
          do_cdnjs(library, version)
        end
        puts "$ cd -"
      end
    end
    private :_download_necessary_libraries

    @action.(:mapping, "show action mappings")
    @option.("--format={text|json|yaml|javascript|jquery|angular}", "output format")
    def do_mapping(format: nil)
      ENV['APP_MODE'] ||= 'dev'
      load_config()
      require './config/urlpath_mapping'
      return \
        case format
        when nil         ; _do_mapping_in_text_format()
        when 'text'      ; _do_mapping_in_text_format()
        when 'json'      ; _do_mapping_in_json_format()
        when 'yaml'      ; _do_mapping_in_yaml_format()
        when 'javascript'; _do_mapping_in_javascript_format(nil)
        when 'jquery'    ; _do_mapping_in_javascript_format('type')
        when 'angular'   ; _do_mapping_in_javascript_format('method')
        else
          raise OptionError.new("#{format}: expected one of text/json/yaml/javascript/jquery/angular.")
        end
    end

    private

    def _do_mapping(&block)
      app = K8::RackApplication.new($urlpath_mapping)
      app.each_mapping do |urlpath_pat, action_class, action_methods, |
        yield urlpath_pat, action_class, action_methods
      end
    end
    private :_do_mapping

    def _do_mapping_in_json_format()
      s = %Q`{ "mappings": [\n`.dup()
      i = 0
      _do_mapping do |urlpath_pat, action_class, action_methods|
        i += 1
        arr = action_methods.map {|k, v| %Q`"#{k}": "#{v}"` }
        s << (i == 1 ? '  ' : ', ')
        s << %Q`{"urlpath": "#{urlpath_pat}"`
        s << %Q`, "class": \"#{action_class.name}"`
        s << %Q`, "method": {#{arr.join(', ')}}}\n`
      end
      s << "] }\n"
      return s
    end

    def _do_mapping_in_yaml_format()
      s = ""
      _do_mapping do |urlpath_pat, action_class, action_methods|
        arr = action_methods.map {|k, v| "#{k}: #{v}" }
        s << "- urlpath: '#{urlpath_pat}'\n"
        s << "  class:   #{action_class.name}\n"
        s << "  method:  {#{arr.join(', ')}}\n"
        s << "\n"
      end
      return s
    end

    def _do_mapping_in_javascript_format(attr)
      rexp = K8::ActionMapping::URLPATH_PARAM_REXP
      defs = {}
      _do_mapping do |urlpath_pat, action_class, action_methods|
        (defs[action_class.name] ||= []) << [urlpath_pat, action_methods]
      end
      buf = []
      defs.each do |action_class_name, pairs|
        if action_class_name =~ /\A\w+\z/
          buf << "#{action_class_name}:{\n"
        else
          buf << "'#{action_class_name}':{\n"
        end
        sep = ' '
        pairs.each do |urlpath_pat, action_methods|
          args = []; i = 0
          urlpath_pat.scan(rexp) {|x, _| args << (x.empty? ? "_#{i+=1}" : x) }
          a = args.dup()
          js_urlpath = "'" + urlpath_pat.gsub(rexp) {|x, _| "'+#{a.shift}+'" } + "'"
          js_urlpath.gsub!(/\+''/, '')
          #
          action_methods.each do |req_meth, action_method|
            buf << sep; sep = ','
            if attr
              js_code = "return{#{attr}:'#{req_meth}',url:#{js_urlpath}}"
              buf << "#{action_method}:function(#{args.join(',')}){#{js_code}}\n"
            else
              js_code = "function(#{args.join(',')}){return#{js_urlpath}}"
              buf << "#{action_method}:{method:'#{req_meth}',urlpath:#{js_code}}\n"
            end
          end
        end
        buf << "},\n"
      end
      buf[-1] = "}\n" if buf[-1] == "},\n"
      return buf.join()
    end

    def _do_mapping_in_text_format()
      s = ""
      _do_mapping do |urlpath_pat, action_class, action_methods|
        action_methods.each do |req_meth, action_method|
          s << "%-6s %-30s # %s\#%s\n" % [req_meth, urlpath_pat, action_class.name, action_method]
        end
      end
      return s
    end

    public

    @action.(:configs, "list config keys and values")
    @option.("--getenv", "show actual ENV value")
    def do_configs(getenv: false)
      ENV['APP_MODE'] ||= 'dev'
      load_config()
      s = ""
      ::Config.each do |key, val, desc, secret|
        kv = "%-20s = %s" % [key, __var_dump(val, secret, getenv)]
        s << ("%-43s # %s\n" % [kv, desc]) if desc
      end
      return s
    end

    @action.(:config, "show config value")
    @option.("--getenv", "show actual ENV value")
    def do_config(key, getenv: false)
      key_name = key
      ENV['APP_MODE'] ||= 'dev'
      load_config()
      ::Config.each do |key, val, desc, secret|
        if key.to_s == key_name
          return __var_dump(val, secret, getenv)
        end
      end
      $stderr.puts "#{key_name}: no such config key."
      return 1
    end

    @action.(:'config:check', "check config values")
    def do_config_check()
      ENV['APP_MODE'] ||= 'dev'
      load_config()
      not_set = []
      not_env = []
      ::Config.each do |key, val, desc, secret|
        if val.is_a?(K8::SecretValue)
          if ! val.name
            not_set << [key, val, desc]
          elsif ! ENV[val.name]
            not_env << [key, val, desc]
          end
        end
      end
      if not_set.empty? && not_env.empty?
        puts "ok."
        return 0
      else
        sb = []
        sb <<     "**"
        sb <<     "** NG!"
        unless not_set.empty?
          sb <<   "**"
          sb <<   "** The following configs should be set, but not."
          sb <<   "**"
          not_set.each do |key, val, desc|
            sb << "**   %-20s = %s" % [key, val.inspect]
          end
        end
        unless not_env.empty?
          sb <<   "**"
          sb <<   "** The following configs expect environment variable, but not set."
          sb <<   "**"
          not_env.each do |key, val, desc|
            sb << "**   %-20s = %s" % [key, val.inspect]
          end
        end
        sb <<     "**"
        puts sb.join("\n")
        return 1
      end
    end

    def __var_dump(val, secret, getenv)
      if ! val.is_a?(K8::SecretValue)
        #secret ? '<secret>' : val.inspect
        val.inspect
      elsif val.name
        getenv ? ENV[val.name].inspect : "ENV['#{val.name}']"
      else
        '<SECRET>'
      end
    end
    private :__var_dump

    @action.(:cdnjs, "search or download libraries from cdnjs.com")
    @option.("-d, --basedir=DIR", "base directory (default: 'static/lib')")
    def do_cdnjs(library=nil, version=nil, basedir: nil)
      require 'open-uri'
      require 'fileutils'
      library.nil? || library =~ /\A\*?[-.\w]+\*?\z/  or
        raise OptionError.new("#{library}: invalid library name.")
      version.nil? || version =~ /\A\d+(\.\d+)+[-.\w]+\z/  or
        raise OptionError.new("#{version}: version number expected.")
      ## list or search libraries
      if library.nil? || library.start_with?('*') || library.end_with?('*')
        return _cdnjs_list(library)
      ## list versions
      elsif version.nil?
        return _cdnjs_find(library)
      ## download files
      else
        return _cdnjs_download(library, version, basedir)
      end
    end

    def _cdnjs_list(library)
      url  = "https://cdnjs.com/libraries"
      rexp = %r'href="/libraries/([-.\w]+)"'
      libs = open(url) {|f|
        #f.grep(rexp) { $1 }  # not work
        f.collect {|s| $1 if s =~ rexp }.compact.sort.uniq
      }
      if library
        libs = libs.select {|s| s.end_with?(library[1..-1]) } if library.start_with?('*')
        libs = libs.select {|s| s.start_with?(library[0..-2]) } if library.end_with?('*')
      end
      return (libs << "").join("\n")
    end

    def _cdnjs_find(library)
      url = "https://cdnjs.com/libraries/#{library}"
      rexp = %r'<option value="(.*?)".*?>\1</option>'
      versions = open(url) {|f|
        f.collect {|s| $1 if s =~ rexp }.compact()
      }.sort_by {|verstr| _normalized_version(verstr) }
      if versions.empty?
        $stderr.puts "#{library}: no such library (GET #{url})."
        return 1
      end
      return (versions << "").join("\n")
    end

    def _cdnjs_download(library, version, basedir=nil)
      basedir ||= "static/lib"
      File.exist?(basedir)  or
        raise OptionError.new("#{basedir}: directory not exist.")
      File.directory?(basedir)  or
        raise OptionError.new("#{basedir}: not a directory.")
      url = "https://cdnjs.com/libraries/#{library}/#{version}"
      rexp = %r">https://cdnjs\.cloudflare\.com/ajax/libs/#{library}/#{Regexp.escape(version)}/([-.\w]+(?:\&\#x2F;[-.\w]+)*)<"
      filenames = open(url) {|f|
        f.collect {|s| $1.gsub(/\&\#x2F;/, '/') if s =~ rexp }.compact()
      }
      if filenames.empty?
        $stderr.puts "#{library} #{version}: no files (GET #{url})."
        return 1
      end
      baseurl = "https://cdnjs.cloudflare.com/ajax/libs"
      filenames.each do |filename|
        fileurl  = "#{baseurl}/#{library}/#{version}/#{filename}"
        filepath = "#{basedir}/#{library}/#{version}/#{filename}"
        FileUtils.mkdir_p(File.dirname(filepath))
        print filepath, ' '
        content = open(fileurl) {|f| f.read }
        File.open(filepath, 'w') {|f| f.write(content) }
        puts "(#{_bytesize(content)} byte)"
      end
      return 0
    end

    def _normalized_version(version_str)
      if version_str =~ /\A(\d+(?:\.\d+)*)(.*)/
        return $1.split('.').map {|n| "%05d" % n.to_i }.join('.') + $2
      else
        return version_str
      end
    end

    def _bytesize(string)
      return string.bytesize.to_s.reverse.gsub(/(...)/, '\1,').sub(/,\z/, '').reverse
    end


    if ENV['DEBUG']
      @action.(:debug, "debug")
      @option.("-h, --help"       , "show help message")
      @option.("--version"        , "print version")
      #@option.("-f, --file=FILE"  , "filename")
      @option.("-f FILE  #file"  , "filename")
      @option.("-i, --indent[=N]" , "indent depth (default 2)")
      @option.("-s"               , "be silent")
      @option.("-S      #silent"  , "be silent")
      @option.("-d[N]   #dbg1"    , "debug level #1")
      @option.("  --dbg2[=N]"     , "debug level #2")
      def do_debug(argmnt=nil, help: nil, version: nil, file: nil, indent: nil, s: nil, silent: false, dbg1: nil, dbg2: nil)
        sb = []
        sb << "** argmnt  = #{argmnt.inspect}"
        sb << "** help:     #{help.inspect}"
        sb << "** version:  #{version.inspect}"
        sb << "** file:     #{file.inspect}"
        sb << "** indent:   #{indent.inspect}"
        sb << "** s:        #{s.inspect}"
        sb << "** silent:   #{silent.inspect}"
        sb << "** dbg1:     #{dbg1.inspect}"
        sb << "** dbg2:     #{dbg2.inspect}"
        return sb.join("\n")
      end
    end


    ###

    def load_config
      require './config' rescue K8::ConfigError
    end

    def run(*cmd_args)
      action_name = cmd_args.shift() || 'help'
      tuple = self.class.find_action(action_name)  or
        raise K8::OptionError.new("#{action_name}: unknown action.")
      action_name, desc, options, method_name = tuple
      optdefs = options.collect {|arr| K8::OptionDefinition.new(*arr) }
      optparser = K8::OptionParser.new(optdefs)
      cmd_opts = optparser.parse(cmd_args)
      func_args = []
      func_kwds = {}
      method_params = self.method(method_name).parameters
      method_params.each do |param_info|
        kind, pname = param_info
        case kind
        when :req
          ! cmd_args.empty?  or
            raise K8::OptionError.new("#{action_name}: argument '#{pname}' required.")
          func_args << cmd_args.shift()
        when :opt
          func_args << cmd_args.shift()   # may be nil
        when :rest
          func_args.concat(cmd_args)
          cmd_args.clear()
        when :key
          k = pname.to_s
          func_kwds[pname] = cmd_opts.delete(k) if cmd_opts.key?(k)
          if cmd_opts.key?(pname.to_s)
            func_kwds[pname] = cmd_opts.delete(pname.to_s)
          end
        else
          $stderr.puts "*** internal error: kind=#{kind.inspect}, pname=#{pname.inspect}"
        end
      end
      cmd_args.empty?  or
        raise K8::OptionError.new("#{action_name}: too many argument.")
      cmd_opts.empty?  or
        raise K8::OptionError.new("#{action_name}: keyword arg not defined (#{cmd_opts.inspect}).")
      if func_kwds.empty?
        output = __send__(method_name, *func_args)
      else
        output = __send__(method_name, *func_args, func_kwds)
      end
      return output
    end

    def self.main
      status = 0
      obj = self.new()
      begin
        output = obj.run(*ARGV)
        case output
        when nil     ;
        when String  ; puts output
        when Integer ; status = output
        else         ; raise "** output=#{output.inspect}"
        end
      rescue K8::OptionError => ex
        $stderr.puts "ERROR (#{obj.script_name}): #{ex}"
        output = nil
        status = 1
      end
      exit status
    end

  end


  class OptionDefinition

    def initialize(defstr, desc)
      @defstr = defstr
      @desc   = desc
      parse(defstr)
    end

    attr_reader :defstr, :name, :desc, :short, :long, :argstr, :arg_required

    def parse(defstr)
      case defstr
      when /\A\s*-(\w),\s+--(\w[-\w]*)(?:=(\S*)|\[=(\S+)\])?(?:\s+\#(\w+))?\z/
        short, long, arg1, arg2, optname = $1, $2, $3, $4, $5
      when /\A\s*--(\w[-\w]*)(?:=(\S*)|\[=(\S+)\])?(?:\s+\#(\w+))?\z/
        short, long, arg1, arg2, optname = nil, $1, $2, $3, $4
      when /\A\s*-(\w)(?:\s+(\S+)|\[(\S+)\])?(?:\s+\#(\w+))?\z/
        short, long, arg1, arg2, optname = $1, nil, $2, $3, $4
      else
        raise "#{defstr.inspect}: invalid option definition."
      end
      @short    = short
      @long     = long
      @argstr   = arg1 || arg2
      @arg_required = !! arg1       # true when option argument is required
      @name     = optname || long || short
    end

  end


  class OptionParser

    def initialize(optdefs)
      @optdefs = optdefs
    end

    def parse(cmd_args)
      options = {}
      while cmd_args.length > 0 && cmd_args.first.start_with?('-')
        optstr = cmd_args.shift()
        if optstr == '--'
          break
        elsif optstr.start_with?('--')
          optstr =~ /\A--(\w+)(?:=(.*))?\z/  or
            raise OptionError.new("#{optstr}: invalid option.")
          long, optarg = $1, $2
          optdef = @optdefs.find {|x| x.long == long }  or
            raise OptionError.new("#{optstr}: unknown option.")
          if ! optdef.argstr && optarg
            raise OptionError.new("#{optstr}: unexpected argument.")
          elsif optdef.arg_required && ! optarg
            raise OptionError.new("#{optstr}: argument required.")
          end
          options[optdef.name] = optarg || true
        else
          i = 0; len = optstr.length
          while (i += 1) < len
            ch = optstr[i]
            optdef = @optdefs.find {|x| x.short == ch }  or
              raise OptionError.new("-#{ch}: unknown option.")
            if ! optdef.argstr             # no arg
              optarg = true
            elsif ! optdef.arg_required    # optional arg
              optarg = i + 1 < len ? optstr[(i+1)..-1] : true
              i = len - 1
            else                           # required arg
              optarg = optstr[(i+1)..-1]
              if optarg.empty?
                optarg = cmd_args.shift()  or
                  raise OptionError.new("-#{ch}: argument required.")
              end
              i = len - 1
            end
            options[optdef.name] = optarg
          end
        end
      end
      return options
    end

  end


  class OptionError < StandardError
  end


  class SkeletonTemplate < BabyErubis::Text

    rexp = BabyErubis::Text::PATTERN
    PATTERN = Regexp.compile(rexp.to_s.sub(/<%/, '\{%').sub(/%>/, '%\}'))

    def pattern
      PATTERN
    end

  end


  class FileTool

    def initialize(width: 30)
      @width = width
      @depth = 0
    end

    def parse_index_file(index_file)
      dict = File.open(index_file) {|f|
        f.grep(/^[^#]/).each_with_object({}) {|line, d|
          path, desc = line.chomp.split(/\s+/, 2)
          d[path] = desc
        }
      }
      return dict
    end

    def report(s, desc)
      indent = '  ' * @depth
      puts "%s%-#{@width - indent.length}s # %s" % [indent, s, desc]
    end

    def mkrootdir(dirpath)
      @root = dirpath
      mkdir(dirpath)
    end

    def mkdir(dirpath, desc)
      Dir.mkdir dirpath
      s = dirpath.gsub(/.*?[\/\\]/, '  ') + "/"
      report(s, desc)
    end

    def mkfile(filepath, content, desc)
      File.open(filepath, 'wb') {|dst| dst.write(content) }
      s = filepath.gsub(/.*?[\/\\]/, '  ')
      report(s, desc)
    end

  end


end


#if __FILE__ == $0
  K8::Main.main() unless defined? NOEXEC_SCRIPT
#end
