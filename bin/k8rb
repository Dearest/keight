#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

###
### $Release: 0.0.0 $
### $Copyright: copyright(c) 2014-2016 kuwata-lab.com all rights reserved $
### $License: MIT License $
###


require 'keight'
require 'open-uri'
require 'fileutils'
require 'json'


module K8


  module ShellHelper

    def rm_rf(path)
      puts "$ rm -rf #{path}"
      FileUtils.rm_rf path
    end

    def mv(oldpath, newpath)
      puts "$ mv #{oldpath} #{newpath}"
      File.rename oldpath, newpath
    end

    def sys(command)
      puts "$ #{command}"
      system command
    end

    def chdir(dir, &block)
      puts "$ cd #{dir}"
      Dir.chdir(dir, &block)
      puts "$ cd -"
    end

    def curl_o(filename, url)
      puts "$ curl -o #{filename} \\"
      puts "       #{url}"
      data = open(url) {|f| f.read() }
      File.open(filename, 'wb') {|f| f.write(data) }
    end

  end


  class MainApp
    include ShellHelper

    @__current = nil
    @__actions = []

    @action = proc do |action_name, desc, dict|
      options = []
      method_name = nil
      (dict ||= {})[:desc] = desc
      tuple = [action_name, dict, options, method_name]
      @__current = tuple
      @__actions << tuple
    end

    @option = proc do |optdef_str, desc, opts|
      tuple = @__current  or
        raise "@option.() is called without @action.()"
      tuple[2] << [optdef_str, desc]
    end

    def self.method_added(method_name)
      tuple = @__current  or return
      tuple[3] = method_name
      @__current = nil
    end

    def self.find_action(name)
      name = name.to_s
      return @__actions.find {|tuple| tuple[0].to_s == name }
    end

    def self.each_action(&block)
      @__actions.each(&block)
    end


    ###

    def initialize(script_name=nil)
      @script_name = script_name || File.basename($0)   # ex: 'k8rb'
    end

    attr_reader :script_name


    ### actions

    @action.(:help, "show help")
    def do_help(action_name=nil)
      script = self.script_name
      sb = []
      if action_name.nil?
        sb <<   "Usage:"
        sb <<   "  #{script} ACTION [..OPTIONS..]"
        sb <<   ""
        sb <<   "Actions:"
        self.class.each_action do |action_name, dict, options, _|
          desc = dict[:desc]
          next unless desc
          help = desc.lines.first.chomp()
          sb << "  #{script} %-15s # #{help}" % [action_name, help]
        end
        sb <<   ""
        sb <<   "(Tips: try '#{script} help ACTION' for details of each action.)"
      else
        tuple = self.class.find_action(action_name)  or
          raise K8::OptionError.new("help #{action_name}: no such action.")
        action_name, dict, options, method_name = tuple
        pnames = self.method(method_name).parameters.collect {|kind, pname|
          case kind
          when :req  ;  pname
          when :opt  ;  "[#{pname}]"
          when :rest ;  "[#{pname}...]"
          when :key  ;  nil
          else
            raise "** kind=#{kind.inspect}, pname=#{pname.inspect}"
          end
        }.compact()
        pnames.unshift('') unless pnames.empty?
        argstr = pnames.join(' ')
        sb <<   "#{script} #{action_name}  - #{dict[:desc]}"
        sb <<   ""
        sb <<   "Usage:"
        if options.empty?
          sb << "  #{script} #{action_name}#{argstr}"
        else
          sb << "  #{script} #{action_name} [options]#{argstr}"
          sb << ""
          sb << "Options:"
          options.each do |optdef_str, optdesc|
            optstr = optdef_str.sub(/\A\s*--/, '    --').sub(/\s+\#\w+\s*\z/, '')
            sb << "  %-20s # %s" % [optstr, optdesc] if optdesc
          end
        end
        if dict[:example]
          sb << ""
          sb << "Examples:"
          sb << dict[:example].gsub(/%SCRIPT%/, script)
        end
      end
      sb << ""
      sb << ""
      return sb.join("\n")
    end

    @action.(:project, "create project files")
    def do_project(name, dir: nil)
      project_name = name
      ## download zip file
      zip_file = proc {|user, repo|
        json_url = "https://api.github.com/repos/#{user}/#{repo}/releases"
        json_str = open(json_url) {|f| f.read }
        json_arr = JSON.parse(json_str)
        version2intarr = proc {|s| /\d+(\.\d+)*/.match(s)[0].split('.').map(&:to_i) }
        dict = json_arr.max_by {|d| version2intarr.call(d['tag_name']) }
        url  = dict['zipball_url']
        puts "## Download boilerplate files"
        file = "#{repo}_#{dict['tag_name']}.zip"
        curl_o(file, url)
        puts ""
        file
      }.call('kwatch', 'keight-ruby-boilerpl8')
      ## unzip it
      proc {|project, zip_file|
        puts "## Extract files"
        destdir = project
        tmpdir  = destdir + ".tmp"
        rm_rf destdir if File.exist?(destdir)
        rm_rf tmpdir  if File.exist?(tmpdir)
        sys "unzip -d #{tmpdir} -q #{zip_file}"
        paths = Dir.glob("#{tmpdir}/*")
        if paths.length == 1 && File.directory?(paths[0])
          mv paths[0], destdir
          rm_rf tmpdir
        else
          mv tmpdir, destdir
        end
        rm_rf zip_file
        puts ""
      }.call(project_name, zip_file)
      ## run initializer script
      proc {|project|
        puts "## Initialize"
        arrs = [
          ["ruby"   , "__init.rb"],
          ["python" , "__init.py"],
          ["bash"   , "__init.sh"],
        ]
        destdir = project
        chdir(destdir) do
          command, script = arrs.find {|_, script| File.exist?(script) }
          sys "#{command} #{script}" if script
        end
        puts ""
      }.call(project_name)
      #
      proc {
        msg = <<-END
        ##
        ## Project directory created.
        ## Next action:
        ##
        ##    $ cd #{project_name}
        ##    $ export APP_ENV='dev'      # or 'prod', 'stg', 'test'
        ##    $ rake -T
        ##    $ rake server port=8000
        ##    $ open http://localhost:8000/
        ##
        END
        return msg.gsub(/^\s+/, '')
      }.call
      0
    end

    @action.(:cdnjs, "search or download libraries from cdnjs.com")
    @option.("-d, --basedir=DIR", "base directory (default: 'static/lib')")
    def do_cdnjs(library=nil, version=nil, basedir: nil)
      require 'open-uri'
      require 'fileutils'
      library.nil? || library =~ /\A\*?[-.\w]+\*?\z/  or
        raise OptionError.new("#{library}: invalid library name.")
      version.nil? || version =~ /\A\d+(\.\d+)+[-.\w]+\z/  or
        raise OptionError.new("#{version}: version number expected.")
      ## list or search libraries
      if library.nil? || library.include?('*')
        return _cdnjs_list(library)
      ## list versions
      elsif version.nil?
        return _cdnjs_find(library)
      ## download files
      else
        return _cdnjs_download(library, version, basedir)
      end
    end

    def _cdnjs_list(pattern)
      url  = "https://api.cdnjs.com/libraries"
      json_str  = open(url) {|f| f.read() }
      json_dict = JSON.parse(json_str)
      libs = json_dict['results'].collect {|d| d['name'] }
      if pattern
        s = Regexp.escape(pattern)   # ex: '*foo.js*'    -> '\*foo\.js\*'
        s = s.gsub(/\\\*/, '.*')     # ex: '\*foo\.js\*' -> '.*foo\.js.*'
        s = "\\A#{s}\\z"             # ex: '.*foo\.js.*' -> '\A.*foo\.js.*\z'
        rexp = Regexp.compile(s)
        libs = libs.grep(rexp)
      end
      return (libs << "").join("\n")
    end

    def _cdnjs_find(library)
      url = "https://api.cdnjs.com/libraries/#{library}"
      json_str  = open(url) {|f| f.read }
      json_dict = JSON.parse(json_str)
      versions  = (json_dict["assets"] || []) \
                    .collect {|d| d["version"] } \
                    .sort_by {|verstr| _normalized_version(verstr) }
      if versions.empty?
        $stderr.puts "#{library}: no such library (GET #{url})."
        return 1
      end
      return (versions << "").join("\n")
    end

    def _cdnjs_download(library, version, basedir=nil)
      option_d_specified = !! basedir
      basedir ||= "static/lib"
      File.exist?(basedir)  or
        raise OptionError.new("#{basedir}: directory not exist" +
                              (option_d_specified ? "." : " (try '-d' to specify location)."))
      File.directory?(basedir)  or
        raise OptionError.new("#{basedir}: not a directory.")
      url = "https://api.cdnjs.com/libraries/#{library}"
      json_str  = open(url) {|f| f.read() }
      json_dict = JSON.parse(json_str)
      asset     = json_dict["assets"].find {|d| d["version"] == version } || {}
      filenames = asset["files"]  # ex: ["jquery.js", "jquery.min.js"]
      if filenames.nil? || filenames.empty?
        $stderr.puts "#{library} #{version}: no files (GET #{url})."
        return 1
      end
      baseurl = "https://cdnjs.cloudflare.com/ajax/libs"
      filenames.each do |filename|
        fileurl  = "#{baseurl}/#{library}/#{version}/#{filename}"
        filepath = "#{basedir}/#{library}/#{version}/#{filename}"
        FileUtils.mkdir_p(File.dirname(filepath))
        print filepath, ' '
        content = open(fileurl) {|f| f.read }
        if _file_changed(filepath, content)
          File.open(filepath, 'w') {|f| f.write(content) }
          s = ""
        else
          s = " (not changed)"
        end
        puts "(#{_bytesize(content)} byte)#{s}"
      end
      return 0
    end

    def _normalized_version(version_str)
      if version_str =~ /\A(\d+(?:\.\d+)*)(.*)/
        return $1.split('.').map {|n| "%05d" % n.to_i }.join('.') + $2
      else
        return version_str
      end
    end

    def _file_changed(filepath, expected)
      return true unless File.exist?(filepath)
      actual = File.read(filepath, encoding: expected.encoding)
      return actual != expected
    end

    def _bytesize(string)
      return string.bytesize.to_s.reverse.gsub(/(...)/, '\1,').sub(/,\z/, '').reverse
    end


    if ENV['DEBUG']
      @action.(:debug, "debug")
      @option.("-h, --help"       , "show help message")
      @option.("--version"        , "print version")
      #@option.("-f, --file=FILE"  , "filename")
      @option.("-f FILE  #file"  , "filename")
      @option.("-i, --indent[=N]" , "indent depth (default 2)")
      @option.("-s"               , "be silent")
      @option.("-S      #silent"  , "be silent")
      @option.("-d[N]   #dbg1"    , "debug level #1")
      @option.("  --dbg2[=N]"     , "debug level #2")
      def do_debug(argmnt=nil, help: nil, version: nil, file: nil, indent: nil, s: nil, silent: false, dbg1: nil, dbg2: nil)
        sb = []
        sb << "** argmnt  = #{argmnt.inspect}"
        sb << "** help:     #{help.inspect}"
        sb << "** version:  #{version.inspect}"
        sb << "** file:     #{file.inspect}"
        sb << "** indent:   #{indent.inspect}"
        sb << "** s:        #{s.inspect}"
        sb << "** silent:   #{silent.inspect}"
        sb << "** dbg1:     #{dbg1.inspect}"
        sb << "** dbg2:     #{dbg2.inspect}"
        return sb.join("\n")
      end
    end


    ###

    def run(*cmd_args)
      action_name = cmd_args.shift() || 'help'
      tuple = self.class.find_action(action_name)  or
        raise K8::OptionError.new("#{action_name}: unknown action.")
      action_name, desc, options, method_name = tuple
      optdefs = options.collect {|arr| K8::OptionDefinition.new(*arr) }
      optparser = K8::OptionParser.new(optdefs)
      cmd_opts = optparser.parse(cmd_args)
      func_args = []
      func_kwds = {}
      method_params = self.method(method_name).parameters
      method_params.each do |param_info|
        kind, pname = param_info
        case kind
        when :req
          ! cmd_args.empty?  or
            raise K8::OptionError.new("#{action_name}: argument '#{pname}' required.")
          func_args << cmd_args.shift()
        when :opt
          func_args << cmd_args.shift()   # may be nil
        when :rest
          func_args.concat(cmd_args)
          cmd_args.clear()
        when :key
          k = pname.to_s
          func_kwds[pname] = cmd_opts.delete(k) if cmd_opts.key?(k)
          if cmd_opts.key?(pname.to_s)
            func_kwds[pname] = cmd_opts.delete(pname.to_s)
          end
        else
          $stderr.puts "*** internal error: kind=#{kind.inspect}, pname=#{pname.inspect}"
        end
      end
      cmd_args.empty?  or
        raise K8::OptionError.new("#{action_name}: too many argument.")
      cmd_opts.empty?  or
        raise K8::OptionError.new("#{action_name}: keyword arg not defined (#{cmd_opts.inspect}).")
      if func_kwds.empty?
        output = __send__(method_name, *func_args)
      else
        output = __send__(method_name, *func_args, func_kwds)
      end
      return output
    end

    def self.main
      status = 0
      obj = self.new()
      begin
        output = obj.run(*ARGV)
        case output
        when nil     ;
        when String  ; puts output
        when Integer ; status = output
        else         ; raise "** output=#{output.inspect}"
        end
      rescue K8::OptionError => ex
        $stderr.puts "ERROR (#{obj.script_name}): #{ex}"
        output = nil
        status = 1
      end
      exit status
    end

  end


  class OptionDefinition

    def initialize(defstr, desc)
      @defstr = defstr
      @desc   = desc
      parse(defstr)
    end

    attr_reader :defstr, :name, :desc, :short, :long, :argstr, :arg_required

    def parse(defstr)
      case defstr
      when /\A\s*-(\w),\s+--(\w[-\w]*)(?:=(\S*)|\[=(\S+)\])?(?:\s+\#(\w+))?\z/
        short, long, arg1, arg2, optname = $1, $2, $3, $4, $5
      when /\A\s*--(\w[-\w]*)(?:=(\S*)|\[=(\S+)\])?(?:\s+\#(\w+))?\z/
        short, long, arg1, arg2, optname = nil, $1, $2, $3, $4
      when /\A\s*-(\w)(?:\s+(\S+)|\[(\S+)\])?(?:\s+\#(\w+))?\z/
        short, long, arg1, arg2, optname = $1, nil, $2, $3, $4
      else
        raise "#{defstr.inspect}: invalid option definition."
      end
      @short    = short
      @long     = long
      @argstr   = arg1 || arg2
      @arg_required = !! arg1       # true when option argument is required
      @name     = optname || long || short
    end

  end


  class OptionParser

    def initialize(optdefs)
      @optdefs = optdefs
    end

    def parse(cmd_args)
      options = {}
      while cmd_args.length > 0 && cmd_args.first.start_with?('-')
        optstr = cmd_args.shift()
        if optstr == '--'
          break
        elsif optstr.start_with?('--')
          optstr =~ /\A--(\w+)(?:=(.*))?\z/  or
            raise OptionError.new("#{optstr}: invalid option.")
          long, optarg = $1, $2
          optdef = @optdefs.find {|x| x.long == long }  or
            raise OptionError.new("#{optstr}: unknown option.")
          if ! optdef.argstr && optarg
            raise OptionError.new("#{optstr}: unexpected argument.")
          elsif optdef.arg_required && ! optarg
            raise OptionError.new("#{optstr}: argument required.")
          end
          options[optdef.name] = optarg || true
        else
          i = 0; len = optstr.length
          while (i += 1) < len
            ch = optstr[i]
            optdef = @optdefs.find {|x| x.short == ch }  or
              raise OptionError.new("-#{ch}: unknown option.")
            if ! optdef.argstr             # no arg
              optarg = true
            elsif ! optdef.arg_required    # optional arg
              optarg = i + 1 < len ? optstr[(i+1)..-1] : true
              i = len - 1
            else                           # required arg
              optarg = optstr[(i+1)..-1]
              if optarg.empty?
                optarg = cmd_args.shift()  or
                  raise OptionError.new("-#{ch}: argument required.")
              end
              i = len - 1
            end
            options[optdef.name] = optarg
          end
        end
      end
      return options
    end

  end


  class OptionError < StandardError
  end


end


#if __FILE__ == $0
  K8::MainApp.main() unless defined? NOEXEC_SCRIPT
#end
